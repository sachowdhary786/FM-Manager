---
import Layout from "@layouts/Layout.astro";
import { contentfulClient } from "src/lib/contentful";
import type { SquadType } from "src/lib/contentful";
import Arena from "../modules/battle_arena/Arena.astro";
import { atom } from "nanostores";

let cards;

export const isButtonClicked = atom(false);

export async function load() {
    try {
        const data = await contentfulClient.getEntries<SquadType>({
            content_type: "squadType",
        });
        if (data.items.length > 0) {
            cards = data.items[0].fields.players;
            shuffle(cards);
            const {p1Current: loadedP1Current, p2Current: loadedP2Current} = currentCard();
            p1Current = loadedP1Current;
            p2Current = loadedP2Current;
            playGame();
        }
    } catch (error) {
        console.error("Error fetching data:", error);
    }
}


let p1Cards: any[] = [];
let p2Cards: any[] = [];

let p1Current: any[] = [];
let p2Current: any[] = [];

let p1Score = 0;
let p2Score = 0;

let outcome: String = "";
let p1ScoreDisplay: String = "";
let p2ScoreDisplay: String = "";
let msgDisplay: String = "";

const isP1Win = outcome === "p1-win";
const isP2Win = outcome === "p2-win";

const winnerText = isP1Win ? "one" : "two";
const tieMessage = "This round is a tie";
const winnerMessage = `Player ${winnerText} wins this round`;

// Shuffling the cards that each player has in their hands
function shuffle(cards) {
    const deckLength = cards.length;
    let p1CardCount = 0;
    let p2CardCount = 0;

    for (let i = deckLength; i > 0; i--) {
        let cardIdx = Math.floor(Math.random() * i);
        if (cards.length === 0) break;
        let randomiseCard = cards.splice(cardIdx, 1);

        if (p1CardCount > p2CardCount) {
            p2Cards.push(randomiseCard[0]);
            p2CardCount += 1;
        } else if (p1CardCount === p2CardCount) {
            p1Cards.push(randomiseCard[0]);
            p1CardCount += 1;
        }
    }
}

// Totalling total score after each "round" in the game
function processRoundOutcome(outcome) {
    if (isP1Win) {
        p1Score += 1;
        p1ScoreDisplay = `Player one score: ${p1Score}`;

        p1Cards.push(p2Current.splice(0, 1)[0]);
        p1Cards.push(p1Current.splice(0, 1)[0]);
    } else if (isP2Win) {
        p2Score += 1;
        p2ScoreDisplay = `Player two score: ${p2Score}`;

        p2Cards.push(p1Current.splice(0, 1)[0]);
        p2Cards.push(p2Current.splice(0, 1)[0]);
    } else {
        p1Cards.push(p1Current.splice(0, 1)[0]);
        p2Cards.push(p2Current.splice(0, 1)[0]);
    }

    if (isP1Win || isP2Win) {
        msgDisplay = winnerMessage;
    } else {
        msgDisplay = tieMessage;
    }
    resetMsgDisplay();

    setTimeout(() => {
        msgDisplay = "";
    }, 2000);
    playGame();
}

const resetMsgDisplay = () => (msgDisplay = "");

function playGame() {
    // If each player has less than 20 cards in their deck
    // Put a random card from each players deck into play
    if (p1Cards.length < 10 && p2Cards.length < 10) {
        currentCard();
        return;
    }

    const isP1Win = p1Cards.length === 10;
    const isP2Win = p2Cards.length === 10;
    const winnerText = isP1Win ? "one" : "two";
    const winnerMessage = `Player ${winnerText} wins the game`;

    if (isP1Win || isP2Win) {
        msgDisplay = winnerMessage;
    }
}

function currentCard() {
    // Select a random card from each players deck
    const p1 = Math.floor(Math.random() * p1Cards.length);
    const p2 = Math.floor(Math.random() * p2Cards.length);

    p1Current.push(p1Cards.splice(p1, 1).shift());
    p2Current.push(p2Cards.splice(p2, 1).shift());

    return { p1Current, p2Current };
}

---

<Layout title="Game Arena">
    <main>
        <Arena />
    </main>
</Layout>

<script define:vars={{ p1Current, p2Current }}>
    // These are coming back as undefined
    // Find a way to bring them into the client side

    console.log(p1Current)

    const statButtons = [
        "pace",
        "shooting",
        "passing",
        "dribbling",
        "defending",
        "physical",
    ];

    // This MUST be done on the server side, find a way to send events to the server
    // to process this data
    // Expand this further down the line for the total power in each stadium ("area of gameplay")

    function compareStat(stat) {
        const p1Stat = p1Current[0][stat];
        const p2Stat = p2Current[0][stat];

        if (p1Stat > p2Stat) {
            processRoundOutcome("p1-win");
        } else if (p2Stat > p1Stat) {
            processRoundOutcome("p2-win");
        } else {
            processRoundOutcome("draw");
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        statButtons.forEach((stat) => {
            const button = document.getElementById(`btn-${stat}`);

            button?.addEventListener("click", () => {
                compareStat(stat);
            });
        });
    });
</script>
